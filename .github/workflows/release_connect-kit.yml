name: Release Connect Kit
concurrency: release-${{ github.repository }}
on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease'
        required: true
jobs:
  release:
    runs-on: ubuntu-latest
    env:
      PKG_NAME: 'Connect Kit'
      PKG_DIR: 'packages/connect-kit'
      PKG_SPEC: '@ledgerhq/connect-kit'
      GIT_TAG_PREFIX: 'ck-'
      DIST_TAG_PRERELEASE: 'beta'
    steps:
      # Checkout project repository
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          registry-url: https://registry.npmjs.org/
          node-version: '16'

      # Build
      - name: Build
        run: |
          cd ${{ env.PKG_DIR }}
          yarn && yarn build

      # Configure Git
      - name: Git configuration
        run: |
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"

      # Bump package version
      # Use tag latest
      - name: Bump release version
        if: startsWith(github.event.inputs.release-type, 'pre') != true
        run: |
          cd ${{ env.PKG_DIR }}
          echo "NEW_VERSION=$(npm --no-git-tag-version version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      # Bump package pre-release version
      # Use tag beta for pre-release versions
      - name: Bump pre-release version
        if: startsWith(github.event.inputs.release-type, 'pre')
        run: |
          cd ${{ env.PKG_DIR }}
          echo "NEW_VERSION=$(npm --no-git-tag-version --preid=${{ env.DIST_TAG_PRERELEASE }} version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=${{ env.DIST_TAG_PRERELEASE }}" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      # Update changelog unreleased section with new version
      - name: Update changelog
        uses: superfaceai/release-changelog-action@v1
        with:
          path-to-changelog: ${{ env.PKG_DIR }}/CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: release

      # Commit changes
      - name: Commit CHANGELOG.md and package.json changes and create tag
        run: |
          cd ${{ env.PKG_DIR }}
          git add "package.json"
          git add "CHANGELOG.md"
          git commit -m "chore: release ${{ env.PKG_NAME }} ${{ env.NEW_VERSION }}"
          git tag ${{ env.GIT_TAG_PREFIX }}${{ env.NEW_VERSION }}

      # Publish version to public repository
      - name: Publish
        run: |
          cd ${{ env.PKG_DIR }}
          yarn publish --verbose --access public --tag ${{ env.RELEASE_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_TOKEN }}

      # Push repository changes
      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin && git push --tags

      # Read version changelog
      - id: get-changelog
        name: Get version changelog
        uses: superfaceai/release-changelog-action@v1
        with:
          path-to-changelog: ${{ env.PKG_DIR }}/CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: read

      # Update GitHub release with changelog
      - name: Update GitHub release documentation
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.GIT_TAG_PREFIX }}${{ env.NEW_VERSION }}
          body: ${{ steps.get-changelog.outputs.changelog }}
          prerelease: ${{ startsWith(github.event.inputs.release-type, 'pre') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
